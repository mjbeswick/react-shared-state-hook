{"version":3,"file":"index.umd.js","sources":["../src/sharedRef.ts","../src/sharedState.ts"],"sourcesContent":["import { MutableRefObject } from 'react'\n\nexport type SharedRef<T> = () => MutableRefObject<T | undefined>;\n\nexport function createSharedRef<T> (initialValue?: T): SharedRef<T> {\n  const referenceObj: MutableRefObject<T | undefined> = {\n    current: initialValue\n  }\n\n  return () => referenceObj\n}\n","type EffectCallback = () => void | Destructor;\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\ntype Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };\ntype DependencyList = ReadonlyArray<any>;\ntype SetStateAction<S> = S | ((prevState: S) => S);\ntype Dispatch<A> = (value: A) => void;\n\nexport type IReact = {\n  useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n\n  useState<S = undefined>(): [\n    S | undefined,\n    Dispatch<SetStateAction<S | undefined>>\n  ];\n\n  useEffect(effect: EffectCallback, deps?: DependencyList): void;\n};\n\ninterface Store<T> {\n  state: T;\n  listeners: Dispatch<SetStateAction<T>>[];\n  setState: (value: T) => void;\n}\n\nconst setCustomHookState = <T>(store: Store<T>) => {\n  return (value: T) => {\n    if (value !== store.state) {\n      store.state = value;\n\n      store.listeners.forEach((listener: any) => {\n        listener(store.state);\n      });\n    }\n  };\n};\n\nconst useCustomHook = <T>(react: IReact, store: Store<T>) => {\n  return (): [T, (value: T) => void] => {\n    const newListener = react.useState<T>()[1] as Dispatch<SetStateAction<T>>;\n\n    react.useEffect(() => {\n      store.listeners.push(newListener);\n\n      return () => {\n        store.listeners = store.listeners.filter(\n          (listener: any) => listener !== newListener\n        );\n      };\n    }, []);\n\n    return [store.state, store.setState];\n  };\n};\n\nconst initializeStore = <T>(initialValue: unknown) => {\n  const store: any = {};\n\n  if (typeof initialValue === 'function') {\n    store.state = initialValue() as T;\n  } else {\n    store.state = initialValue as T;\n  }\n\n  store.listeners = [];\n  store.setState = setCustomHookState<T>(store);\n\n  return store as Store<T>;\n};\n\nexport type SharedState<T> = () => [T, (value: T) => void];\n\nexport const createSharedState = <T>(\n  react: unknown,\n  initialValue?: T | (() => T)\n) => {\n  const store: Store<T> = initializeStore(initialValue);\n\n  return useCustomHook(react as IReact, store as Store<T>);\n};\n"],"names":["initialValue","referenceObj","current","react","store","state","listeners","setState","value","forEach","listener","setCustomHookState","initializeStore","newListener","useState","useEffect","push","filter","useCustomHook"],"mappings":"qQAIoCA,GAClC,IAAMC,EAAgD,CACpDC,QAASF,GAGX,yBAAaC,wBC8DkB,SAC/BE,EACAH,GAEA,IAAMI,EArBgB,SAAIJ,GAC1B,IAAMI,EAAa,GAWnB,OAREA,EAAMC,MADoB,mBAAjBL,EACKA,IAEAA,EAGhBI,EAAME,UAAY,GAClBF,EAAMG,SAxCmB,SAAIH,GAC7B,gBAAQI,GACFA,IAAUJ,EAAMC,QAClBD,EAAMC,MAAQG,EAEdJ,EAAME,UAAUG,QAAQ,SAACC,GACvBA,EAASN,EAAMC,WAkCJM,CAAsBP,GAEhCA,EASiBQ,CAAgBZ,GAExC,OAzCoB,SAAIG,EAAeC,GACvC,kBACE,IAAMS,EAAcV,EAAMW,WAAc,GAYxC,OAVAX,EAAMY,UAAU,WAGd,OAFAX,EAAME,UAAUU,KAAKH,cAGnBT,EAAME,UAAYF,EAAME,UAAUW,OAChC,SAACP,UAAkBA,IAAaG,MAGnC,IAEI,CAACT,EAAMC,MAAOD,EAAMG,WA2BtBW,CAAcf,EAAiBC"}